@page
@model RegisterModel
@{
    TempData["Titile"] = "Register";
    var keys = ModelState.Keys;
}

@section Styles {
    <link rel="stylesheet" href="~/lib/country-select-js/css/countrySelect.css">
    <link rel="stylesheet" href="~/lib/intl-tel-input/css/intlTelInput.css">
}

<div class="row">
    <div class=" d-flex justify-content-center">
        <div class="col-6 p-4 border" style="background-color: rgb(231, 230, 230); border-radius:0.8rem">

            <div class=" visually-hidden">
                <span id="tabIndex">@Model.Initialtab</span>
            </div>

            <form method="post" id="frmRegister" asp-page="/Account/Register" asp-page-handler="UserRegister"
                asp-route-tabindex="0">

                <!-- 'Tab-1' user register  --->
                <div class="tab">

                    <div class="mb-3 row">
                        <div class="col-3">
                            <label asp-for="Input.Email" class=" form-label"></label>
                        </div>
                        <div class="col">
                            <input type="text" asp-for="Input.Email" class=" form-control">
                            <span asp-validation-for="Input.Email" class=" text-danger"></span>
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <div class="col-3">
                            <label asp-for="Input.Password" class=" form-label"></label>
                        </div>
                        <div class="col">
                            <input id="password" type="password" asp-for="Input.Password" autocomplete="on"
                                class=" form-control">
                            <ul class=" text-decoration-none list-unstyled">
                                @if (keys.Any(x => x == "Input.Password"))
                                {
                                    var errors = ModelState["Input.Password"]!.Errors.Select(x => x.ErrorMessage).ToList();
                                    foreach (var error in ModelState["Input.Password"]!.Errors)
                                    {
                                        <li class=" text-danger mb-2">@error.ErrorMessage</li>
                                    }
                                }
                                else
                                {
                                    <span asp-validation-for="Input.Password" class=" text-danger"></span>
                                }
                            </ul>
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <div class="col-3">
                            <label asp-for="Input.ConfirmPassword" class=" form-label"></label>
                        </div>
                        <div class="col">
                            <input id="rePassword" type="password" asp-for="Input.ConfirmPassword" autocomplete="on"
                                class=" form-control">
                            <span asp-validation-for="Input.ConfirmPassword" class=" text-danger"></span>
                        </div>
                    </div>

                </div>
                <!-- end --->

            </form>

            <form method="post" id="frmUpdate" asp-page="/Account/Register" asp-page-handler="Update" tabindex="0">

                <div class=" visually-hidden">
                    <input asp-for="CurrentUser" class=" form-control">
                </div>

                <!-- 'Tab-2' update user details --->
                <div class="tab">
                    <div class="mb-3 row">
                        <div class="col-3">
                            <label asp-for="Profile.FirstName"></label>
                        </div>
                        <div class="col">
                            <input type="text" asp-for="Profile.FirstName" class=" form-control">
                            <span asp-validation-for="Profile.FirstName" class=" text-danger"></span>
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <div class="col-3">
                            <label asp-for="Profile.LastName"></label>
                        </div>
                        <div class="col">
                            <input type="text" asp-for="Profile.LastName" class=" form-control">
                            <span asp-validation-for="Profile.LastName" class=" text-danger"></span>
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <div class="col-3">
                            <label asp-for="Profile.Gender"></label>
                        </div>
                        <div class="col">
                            <div class="d-flex  justify-content-around">
                                @foreach (var gender in Enum.GetValues(typeof(Gender)))
                                {
                                    <div class="form-check">
                                        <input asp-for="Profile.Gender" data-val="true" class="form-check-input"
                                            type="radio" value="@gender" id="@gender"
                                            checked="@((gender as Gender?) == Model.Profile.Gender)">
                                        <label class="form-check-label">@gender</label>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <!-- end --->

                <!-- 'Tab-3' update user's contact --->
                <div class="tab">
                    <div class="mb-3 row">
                        <div class="col-4">
                            <label asp-for="Profile.Phone" class=" form-label"></label>
                        </div>
                        <div class="col">
                            <input id="phone" type="tel" class=" form-control">
                            <input id="phone_input" asp-for="Profile.Phone" class=" form-control visually-hidden">
                            <span id="phone_validation" asp-validation-for="Profile.Phone" class=" text-danger"></span>
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <div class="col-3">
                            <label asp-for="Profile.Country" class=" form-label"></label>
                        </div>
                        <div class="col">
                            <input id="country_selector" type="text" class=" form-control">
                            <input id="country" type="text" asp-for="Profile.Country"
                                class=" form-control visually-hidden">
                            <span asp-validation-for="Profile.Country" class=" text-danger"></span>
                        </div>
                    </div>

                    <div class="mb-3 row">
                        <div class="col-3">
                            <label asp-for="Profile.State" class=" form-label"></label>
                        </div>
                        <div class="col">
                            <input type="text" asp-for="Profile.State" class=" form-control">
                            <span asp-validation-for="Profile.State" class=" text-danger"></span>
                        </div>
                    </div>
                </div>
                <!-- end --->

            </form>

            <form method="post" id="frmUpload" asp-page="/Account/Register" asp-page-handler="Upload" tabindex="0">

                <!-- 'Tab-4' update profile image --->
                <div class="tab">
                    <div class="mb-3 row">
                        <div class="col-5">
                            <label asp-for="Profile.ProfileImage" class=" mb-3 form-label"></label>
                            <input id="image_file" type="file" asp-for="Profile.ProfileImage" class="form-control-file">
                            <span asp-validation-for="Profile.ProfileImage" class=" text-danger"></span>
                        </div>
                        <div class="col">
                            <div class="text-center">
                                <img id="image_preview" src="~/images/defaultUser.jpeg"
                                    class="rounded mb-4 img-thumbnail" alt="profile image">
                            </div>
                        </div>
                    </div>
                </div>
                <!-- end --->

            </form>

            <!-- form buttons --->
            <div class="mb-3 row">
                <div class="col-3">
                </div>
                <div class="col">
                    <div class="d-flex justify-content-end">
                        <button class="btn btn-info fs-6 px-5 me-2" id="prevBtn"
                            onclick="nextPrev(-1)">Previous</button>
                        <button id="nextBtn" class="btn btn-danger fs-6 px-5" onclick="nextPrev(1)">Next</button>
                    </div>
                </div>
            </div>
            <!-- end --->

            <!-- tab's indicator --->
            <div class="mb-0 mt-5 row">
                <div class="d-flex justify-content-center">
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>
                </div>
            </div>
            <!-- end --->

        </div>
    </div>
</div>

@section Scripts {
    <partial name="../Shared/_ValidationScriptsPartial.cshtml"></partial>
    <script src="~/lib/country-select-js/js/countrySelect.min.js"></script>
    <script src="~/lib/intl-tel-input/js/intlTelInput.min.js"></script>
    <script src="~/lib/intl-tel-input/js/utils.js"></script>

    <script type="text/javascript">
        let currentTab = 0;

        const showTab = (n) => {
            const tabElement = document.getElementsByClassName('tab');
            tabElement[n].style.display = "block";

            if (n == 0) {
                document.getElementById('prevBtn').style.display = "none";
            } else {
                document.getElementById('prevBtn').style.display = "inline";
            }

            if (n == (tabElement.length - 1)) {
                document.getElementById('nextBtn').innerHTML = "Submit";
            } else {
                document.getElementById('nextBtn').innerHTML = "Next";
            }

            fixStepIndicator(n)
        }

        // jquery form validation
        const formValidation = () => {
            $('#frmRegister').validate();
            return $('#frmRegister').valid();
        }

        const nextPrev = (n) => {
            const tabElement = document.getElementsByClassName('tab');
            const validationResult = formValidation();

            if (n == 1 && !validationResult) return false;

            tabElement[currentTab].style.display = "none";

            const forwardTab = currentTab;
            currentTab += n;

            const pwd = document.getElementById('password').value;

            if (currentTab == 1 && forwardTab < currentTab && pwd != 'P######1') {
                getFormActionUpdate('frmRegister');
                return false;
            }

            if (forwardTab > currentTab) {
                document.getElementById('password').value = "P######1";
                document.getElementById('rePassword').value = "P######1";
            }

            if (currentTab == (tabElement.length - 1)) {
                getFormActionUpdate('frmUpdate');
                return false;
            }

            if (currentTab >= tabElement.length) {
                getFormActionUpdate('frmUpdate');
                return false;
            }

            showTab(currentTab);
        }

        const getFormActionUpdate = (formName) => {
            const form = document.getElementById(formName);
            let action = form.getAttribute('action');
            action = action.replace('tabindex=0', `tabindex=${currentTab}`);
            form.setAttribute('action', action);

            form.submit();
        }

        const fixStepIndicator = (n) => {
            const stepElement = document.getElementsByClassName('step');

            for (let i = 0; i < stepElement.length; i++) {
                stepElement[i].className = stepElement[i].className.replace(' active', '');
            }

            document.getElementById('tabIndex').value = currentTab;
            stepElement[n].className += " active";
        }

        // phone number format and validation
        const input = document.querySelector("#phone");
        const iti = window.intlTelInput(input, {
            initialCountry: "auto",
            nationalMode: true,
            autoInsertDialCode: true,
            showSelectedDialCode: false,
            showFlags: true,
            placeholderNumberType: "MOBILE",
            geoIpLookup: callback => {
                fetch("https://ipapi.co/json")
                    .then(res => res.json())
                    .then(data => callback(data.country_code))
                    .catch(() => callback("np"));
            },
            customPlaceholder: (selectedCountryPlaceholder, selectedCountryData) => {
                return "+" + selectedCountryData.dialCode + " " + selectedCountryPlaceholder;
            },
            utilsScript: "~/lib/intl-tel-input/js/utils.js"
        });

        // set number for example
        //iti.setNumber("+9779842382525");

        input.addEventListener('focusout', () => {
            const isValid = iti.isValidNumber();

            if (isValid == true) {
                const number = iti.getNumber();
                document.getElementById('phone_input').setAttribute('value', number);
            }
            else {
                const error = iti.getValidationError();
                if (error == intlTelInputUtils.validationError.TOO_SHORT) {
                    document.getElementById('phone_validation').setAttribute('value', 'Number is too short');
                }
            }
        });
        // phone end

        // Profile Image Preview
        document.getElementById('image_file').addEventListener('change', (e) => {
            const image_preview = document.getElementById('image_preview');

            const file = e.target.files[0];
            const reader = new FileReader();

            reader.onload = (e) => {
                image_preview.src = e.target.result;
            };

            reader.readAsDataURL(file);
        });
        // end

        $(document).ready(function () {
            const index = document.getElementById('tabIndex').innerHTML;
            currentTab = parseInt(index);

            showTab(currentTab);

            // country start
            $('#country_selector').countrySelect({
                defaultCountry: "np",

            });

            const countryData = $("#country_selector").countrySelect("getSelectedCountryData");
            $('#country').val(countryData.iso2);

            $('#country_selector').change(function () {
                const countryData = $("#country_selector").countrySelect("getSelectedCountryData");
                $('#country').val(countryData.iso2);
            });

            // end
        });
    </script>
}
